using ApxAPI;
using System;
using System.IO;
using System.Threading;
using System.Windows.Forms;
using Gma.System.MouseKeyHook;

namespace backgroundInjector
{
    internal static class Program
    {
        private static IKeyboardMouseEvents _hook;

        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);

            // create tray icon for windows
            NotifyIcon trayIcon = new NotifyIcon();
            trayIcon.Icon = System.Drawing.SystemIcons.Application;
            trayIcon.Text = "backgroundInjector";

            ContextMenuStrip trayMenu = new ContextMenuStrip();
            trayMenu.Items.Add("Exit", null, (s, e) => ExitApplication(trayIcon));

            trayIcon.ContextMenuStrip = trayMenu;
            trayIcon.Visible = true;

            // key listeners
            _hook = Hook.GlobalEvents();
            _hook.KeyDown += OnKeyDown;

            Application.Run(); 

            // cleanup on exit
            _hook.Dispose();
        }

        private static void OnKeyDown(object sender, System.Windows.Forms.KeyEventArgs e)
        {
            if (e.KeyCode == Keys.F1) 
            {
                Inject();
            }
            else if (e.KeyCode == Keys.F2) 
            {
                Execute();
            }
        }

        private static void Inject()
        {
            Console.WriteLine("Attempting to Inject...");

            if (Functions.IsRobloxOpen())
            {
                Functions.Inject(false);
                Console.WriteLine("Injected successfully.");
            }
            else
            {
                Console.WriteLine("Open Roblox first.");
            }
        }

        private static void Execute()
        {
            string scriptDirectory = Path.Combine(Directory.GetCurrentDirectory(), "Scripts", "myscript.txt");

            if (!File.Exists(scriptDirectory))
            {
                Console.WriteLine($"Script file not found at: {scriptDirectory}");
                return;
            }

            string scriptContent = File.ReadAllText(scriptDirectory);

            Console.WriteLine("Attempting to Execute Script...");

            if (Functions.IsRobloxOpen())
            {
                Functions.ExecuteScript(scriptContent);
                Console.WriteLine("Script executed successfully.");
            }
            else
            {
                Console.WriteLine("Cannot execute. Roblox is not open.");
            }
        }

        private static void ExitApplication(NotifyIcon trayIcon)
        {
            Functions.Inject(true);
            trayIcon.Visible = false;
            trayIcon.Dispose();
            _hook.Dispose();
            Application.Exit();
        }
    }
}
